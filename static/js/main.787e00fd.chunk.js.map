{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/getData.ts","constants.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getData","a","fetch","response","json","FindMovie","addMovie","useState","movieTitle","setMovieTitle","newMovie","setNewMovie","error","setError","findMovie","Title","Plot","Poster","imdbID","Response","isMovieAdded","some","oldMovie","onSubmit","event","preventDefault","htmlFor","onChange","e","value","target","type","id","placeholder","cn","onClick","App","state","data","setState","prevState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.787e00fd.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: FC<Props> = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { BASE_URL } from '../constants';\n\nexport const getData = async <T>(title: string): Promise<T> => {\n  const response = await fetch(`${BASE_URL}${title}`);\n\n  return response.json();\n};\n","export const baseMovieUrl = 'https://www.imdb.com/title/';\nexport const BASE_URL = 'https://www.omdbapi.com/?apikey=7246e96f&t=';\n","import React, {\n  FC,\n  useState,\n  ChangeEvent,\n  FormEvent,\n} from 'react';\n\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { getData } from '../../api/getData';\n\nimport { MovieCard } from '../MovieCard';\nimport { baseMovieUrl } from '../../constants';\n\ninterface Props {\n  addMovie: (newMovie: Movie) => void;\n  movies: Movie[];\n}\n\nexport const FindMovie: FC<Props> = ({ addMovie, movies }) => {\n  const [movieTitle, setMovieTitle] = useState('');\n  const [newMovie, setNewMovie] = useState<Movie | null >(null);\n  const [error, setError] = useState(false);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    setMovieTitle(value);\n  };\n\n  const findMovie = async () => {\n    const movie: MovieFromServer = await getData(movieTitle);\n\n\n    const {\n      Title: title,\n      Plot: description,\n      Poster: imgUrl,\n      imdbID: imdbId,\n      Response: response,\n    } = movie;\n\n    if (response === 'True') {\n      const imdbUrl = baseMovieUrl + imdbId;\n      const foundMovie = {\n        title,\n        description,\n        imgUrl,\n        imdbId,\n        imdbUrl,\n      };\n\n      setNewMovie(foundMovie);\n      setError(false);\n    } else {\n      setNewMovie(null);\n      setError(true);\n    }\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    findMovie();\n  };\n\n  const isMovieAdded = movies.some(oldMovie => oldMovie.title === newMovie?.title);\n\n  const handleAdd = () => {\n    if (newMovie && !isMovieAdded) {\n      addMovie(newMovie);\n    }\n\n    setNewMovie(null);\n    setMovieTitle('');\n    setError(false);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              onChange={handleChange}\n              value={movieTitle}\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={\n                cn('input', {\n                  'is-danger': error,\n                })\n              }\n            />\n          </div>\n\n          {\n            error\n              ? (\n                <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n                </p>\n              ) : null\n          }\n\n          {\n            isMovieAdded\n              ? (\n                <p className=\"help is-danger\">\n              This movie is already in the list\n                </p>\n              ) : null\n          }\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={handleAdd}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {\n          newMovie\n            ? <MovieCard {...newMovie} />\n            : null\n        }\n      </div>\n    </>\n  );\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends Component <{}, State> {\n  state = {\n    movies: data,\n  };\n\n  addMovie = (newMovie: Movie) => {\n    this.setState(prevState => ({\n      movies: [\n        ...prevState.movies,\n        newMovie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <FindMovie addMovie={this.addMovie} movies={movies} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}